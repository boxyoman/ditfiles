let s:uname = ""
if has("unix")
  let s:uname = substitute(system("uname"), '\n', '', '')
endif

" Change Leader
let mapleader = ","

let g:python_host_prog = '/usr/local/bin/python'

" Local .vimrc
set exrc
set secure

" Tab
set shiftwidth=2
set tabstop=2
set softtabstop=2
set expandtab

" random settings
set encoding=utf-8
set showmode
set showcmd
set visualbell
set cursorline
set ttyfast
set relativenumber
set undofile
set undodir=~/.nvim/undo
set undolevels=1000
set undoreload=10000
set ruler
set hidden
set spelllang=en_us
au FocusLost * :wa
set winaltkeys=no

" allow backspacing over everything in insert mode
set backspace=indent,eol,start

" Search stuff
set incsearch
set smartcase
set ignorecase
set gdefault
set hlsearch
set showmatch
nnoremap <leader><space> :noh<cr>

" long lines
set wrap
set textwidth=79
set formatoptions=tqcnw1
set colorcolumn=80

" Moving
nnoremap j gj
nnoremap k gk
inoremap jk <ESC>
nnoremap <c-e> 3<c-e>
nnoremap <c-y> 3<c-y>

" Quick Macro
nnoremap Q @q

" Sudo save
cmap w!! w !sudo /usr/bin/tee > /dev/null %

" Easy Copy and paste from clip board
nnoremap <leader>p "+p
nnoremap <leader>P "+P
nnoremap <leader>y "+y
nnoremap <leader>Y "+Y
vnoremap <leader>y "+y
vnoremap <leader>p "+p

" Window mappings
nnoremap <leader>w <C-w>n<C-w>L
nnoremap <leader><leader> <c-w><c-w>
nnoremap <c-w>n :vnew<cr>
nnoremap <leader>ev :vsplit $MYVIMRC<cr>

" some file specific stuff
au BufReadPost,BufRead *.md set filetype=markdown

" Invisable Characters
nnoremap <leader>l :set list!<CR>
set listchars=tab:▸\ ,eol:¬

"Invisible character colors 
highlight NonText guifg=#4a4a59
highlight SpecialKey guifg=#4a4a59

" Buffer Remapping
nnoremap <leader>bn :bn<cr>
nnoremap <leader>bp :bp<cr>

" Open new tab with terminal
nnoremap <leader>t :tabnew<cr>:term<cr>

" terminal mode
tmap <leader><leader> <c-\><c-n><leader><leader>
tmap gt <c-\><c-n>gt

" C++ options
set cino=N-s
set cino+=g0

" vim-plug, some plugin manager
call plug#begin('~/.nvim/plugged')

Plug 'SirVer/ultisnips'

" This program is Mac only
if s:uname == "Darwin"
  Plug 'rizzatti/dash.vim'
endif

Plug 'octol/vim-cpp-enhanced-highlight'
Plug 'bling/vim-airline'
Plug 'ajh17/Spacegray.vim'
Plug 'vim-scripts/vim-xdc-syntax'
Plug 'lervag/vim-latex'

Plug 'scrooloose/nerdtree'
Plug 'kien/ctrlp.vim'
Plug 'vim-scripts/a.vim'

Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'

Plug 'tpope/vim-obsession'
Plug 'Raimondi/delimitMate'
Plug 'tpope/vim-surround'
Plug 'simnalamburt/vim-mundo'

Plug 'rdnetto/YCM-Generator'
Plug 'Valloric/YouCompleteMe', {'do': './install.sh --clang-completer'}

" Can't seem to get this to work
"Plug 'critiqjo/lldb.nvim'

Plug 'justinmk/vim-sneak'
Plug 'junegunn/vim-easy-align'
Plug 'scrooloose/nerdcommenter'

call plug#end()

" Theme Stuff
colorscheme spacegray
let g:airline_theme='luna'
set t_Co=256
set laststatus=2
let g:airline_powerline_fonts = 1

" CTRlp
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'
let g:ctrlp_working_path_mode = 'a'
set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*.o,*/build/*,*/STL/*

" C++ highighting
let g:cpp_class_scope_highlight = 1

"YouCompleteMe
let g:ycm_confirm_extra_conf = 0
nnoremap yd :YcmCompleter GoTo<CR>
nnoremap ygt :YcmCompleter GetType<CR>
nnoremap ygp :YcmCompleter GetParent<CR>
nnoremap yc :YcmDiags<CR>
let g:Show_diagnostics_ui = 1 
let g:ycm_autoclose_preview_window_after_insertion = 1
let g:ycm_add_preview_to_completeopt = 1

"UltiSnip
let g:UltiSnipsSnippetsDir    = '~/.nvim/UltiSnips'
let g:UltiSnipsExpandTrigger  = "<c-j>"
let g:UltiJumpForwardTrigger  = "<c-j>"
let g:UltiJumpBackwardTrigger = "<c-s-j>"

" NERDTree
nnoremap <leader>o :NERDTreeToggle<CR>

" Dash Search
if s:uname == "Darwin"
  nmap <silent> <s-k> <Plug>DashSearch
endif

" Easy Align
map ga <Plug>(EasyAlign)

" Gundo
nnoremap <leader>u :GundoToggle<CR>

function! GetByte()
  let byte = line2byte( line( "." ) ) + col( "." ) - 1
  return byte
endfunction
" Get the current byte of the character under the cursor
" To be used with clang-replace
command GetByte echo GetByte()

" Reload vimrc upon save. 
augroup myvimrc
  au!
  au BufWritePost .vimrc,_vimrc,vimrc,.gvimrc,_gvimrc,gvimrc so $MYVIMRC | if has('gui_running') | so $MYGVIMRC | endif
augroup END

